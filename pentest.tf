# pentest.tf
# within https://github.com/McK-Internal/Cloud_Data_Bridge/...

# Configure the AWS Provider instead of variables.tf?
provider "aws" {
  region = "us-east-1"
}
variable "env" {
  type = string
  default = "stage"  # or "dev" or "prod"
}

variable "bucket_root_name" {
  type = string
  default = "replace"  # no default - example: cdb-stage-redaction-batch
}

variable "allow" {
  type    = bool
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

resource "aws_iam_group" "pentesters" {
  name = "${var.bucket_root_name}"
}

resource "aws_iam_group_membership" "team" {
  name = "${var.bucket_root_name}"

  users = [
    aws_iam_user.pentester1.name,
    aws_iam_user.pentester2.name,
  ]

  group = aws_iam_group.pentesters.name
}

resource "aws_iam_user" "pentester1" {
  name = "pentester1"
  path = "/pentesters/"
}

resource "aws_iam_user" "pentester2" {
  name = "pentester2"
  path = "/pentesters/"
}

# s3://cdb-stage-dataquality-batch

resource "aws_s3_bucket" "bucket" {
  bucket_prefix = "${var.bucket_root_name}"
  acl    = "private"
}

# s3://cdb-stage-dataquality-batch/trans
# s3://cdb-stage-dataquality-batch/input
# s3://cdb-stage-dataquality-batch/output
resource "aws_s3_bucket_policy" "bucket" {
  bucket = aws_s3_bucket.trans_bucket.id

  policy = jsonencode({
    Version = "2012-10-17"
    Id      = "PENTESTERS"
    Statement = [
      {
        Sid       = "pentesters1"
        Effect    = var.allow ? "Allow" : "Deny"
        Principal = [aws_iam_user.pentester1.arn, aws_iam_user.pentester2.arn]
        Action    = ["s3:ListBucket"]
        Resource = [
          aws_s3_bucket.trans_bucket.arn,
        ]
      },
      {
        Sid       = "pentesters2"
        Effect    = var.allow ? "Allow" : "Deny"
        Principal = [aws_iam_user.pentester1.arn, aws_iam_user.pentester2.arn]
        Action    = ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"]
        Resource = [
          "${aws_s3_bucket.trans_bucket.arn}/trans/*",
        ]
      },
      {
        Sid       = "pentesters3"
        Effect    = var.allow ? "Allow" : "Deny"
        Principal = [aws_iam_user.pentester1.arn, aws_iam_user.pentester2.arn]
        Action    = ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"]
        Resource = [
          "${aws_s3_bucket.trans_bucket.arn}/input/*",
        ]
      },
      {
        Sid       = "pentesters4"
        Effect    = var.allow ? "Allow" : "Deny"
        Principal = [aws_iam_user.pentester1.arn, aws_iam_user.pentester2.arn]
        Action    = ["s3:GetObject"]
        Resource = [
          "${aws_s3_bucket.trans_bucket.arn}/output/*",
        ]
      },
    ]
  })
}
